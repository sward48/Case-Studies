---
title: "Case Study 1: NFL part"
authors: "Benedikt, Elisa, & Steve"
format: html
---

# NFL PART

```{r}
#read in data
fileurl <- '17nflog.html'
x <- scan(fileurl, what = "", sep = "\n")
```

```{r}
#test
x[23]
```

```{r}
#get rid of html and nasty-ness
x <- gsub('&nbsp;', '', x, fixed = TRUE)
x <- gsub("</span>", ";", x) 
x <- gsub("<[^<>]*>", "", x)
```

```{r}
#split by commas
y <- strsplit(x, ";")
y[23]
```

```{r}
z <- y[sapply(y, length) == 6 | sapply(y, length) == 1]

# only keep rows with length 1 that have all capitalized letters or parentheses,
# or start with "(at"
team_function <- function(v) {
  if(length(v) == 1) {
    grepl("^[A-Z &().]+$", v) || grepl("^\\(at", v)
  } else {
    TRUE
  }
}
z <- z[sapply(z, team_function)]

# for lines with length 1, remove all parentheses and their contents
# except they start with "(at"
for (i in seq_along(z)) {
  if(length(z[[i]]) == 1 && !grepl("^\\(at", z[[i]])) {
    z[[i]] <- gsub("\\(.*?\\)", "", z[[i]])
  } else if(length(z[[i]]) == 6) {
    z[[i]] <- gsub("-ot", "", z[[i]]) # get rid of the -ot
  }
}


# make an empty df with rownames team1 and team2
df <- NULL

# loop through z and when length is 1, set team1 from the last row with length 1
# and team2 as the following rows from second element
for (i in seq_along(z)) {
  if(length(z[[i]]) == 1 && !grepl("^\\(at", z[[i]])) {
    team1 <- z[[i]]
  } else if(length(z[[i]]) == 6) {
    team2 <- z[[i]][2]
    # if team2 is all caps (can have ".") set location to H otherwise A
    if (grepl("^[A-Z .]+$", team2)) {
      location <- "H"
    } else {
      location <- "V"
    } 
    # if there is a next line and it starts with "(at", set location to N
    if (i < length(z) && grepl("^\\(at", z[[i+1]][1])) {
      location <- "N"
    }
    df <- rbind(df, data.frame(team1 = tolower(team1), team2 = tolower(team2),
                               location = location))
  } 
}
```

```{r}
#this block will find out the ot status (searches opponet name for "-ot")
zz <- y[sapply(y, length) == 6]
#make ot column
ot <- rep(NA, 534)
for(i in 1:534){
  if (grepl("-ot", zz[[i]][2])){
    ot[i] <- TRUE
  } else {
    ot[i] <- FALSE
  }
}
```

```{r}
#block finds the scores of the games
zz <- y[sapply(y, length) == 6]
scores <- rep(NA, 534)
for(i in 1:534){
  scores[i] <- zz[[i]][5]
}
scores <- strsplit(scores, "-")
table(sapply(scores, length))
scores <- matrix(as.numeric(unlist(scores)), ncol = 2, byrow = TRUE)
```

```{r}
#fixing the dates
wrong <- rep(NA, 534)
for(i in 1:534){
  wrong[i] <- zz[[i]][1]
}

#make a dictionary to fix the date format (add in year so it's less annoying)
month_year_dict <- c(
  J = "2018/01",
  F = "2018/02",
  S = "2017/09",
  O = "2017/10",
  N = "2017/11",
  D = "2017/12"
)
#split the month up into parts then fix it
wrong <- gsub("*", "", wrong, fixed = TRUE)
wrong <- strsplit(wrong, "\\.")

months <- sapply(sapply(wrong, `[`, 1), function(m) month_year_dict[m])
days <- sapply(wrong, `[`, 2)

dates <- paste(months, days, sep = "/")
```

```{r}
#this will make adding the pointspread and overunder easier
#follow the same simple extraction technique and make into its own col
zz <- y[sapply(y, length) == 6]
ps <- rep(NA, 534)
for(i in 1:534){
  ps[i] <- zz[[i]][4]
  ps[i] <- gsub("'", ".5", ps[i], fixed = TRUE)
  ps[i] <- gsub("P", 0, ps[i])
  ps[i] <- as.numeric(ps[i])
}

zz <- y[sapply(y, length) == 6]
ps <- rep(NA, 534)
for(i in 1:534){
  ps[i] <- zz[[i]][4]
  ps[i] <- gsub("'", ".5", ps[i], fixed = TRUE)
  ps[i] <- gsub("P", 0, ps[i])
  ps[i] <- as.numeric(ps[i])
}
ou <- rep(NA, 534)
for(i in 1:534){
  ou[i] <- zz[[i]][6]
  ou[i] <- gsub("o", "", ou[i], fixed = TRUE)
  ou[i] <- gsub("u", "", ou[i], fixed = TRUE)
  ou[i] <- gsub("n", "", ou[i], fixed = TRUE)
  ou[i] <- gsub("'", ".5", ou[i], fixed = TRUE)
}
```

```{r}
#add the season (will all be 2017)
season = rep(2017, 534)
```

```{r}
#throw it all together
x <- data.frame(date = dates,
                season = season,
                team1 = df$team1,
                team2 = df$team2,
                pointspread = as.numeric(ps),
                score1 = scores[,1],
                score2 = scores[,2],
                location = df$location,
                overtime = ot,
                overunder = as.numeric(ou),
                stringsAsFactors = FALSE)
```

```{r}
#write the csv to computer
write.csv(x, "nfl_2017.csv", row.names = FALSE)
```